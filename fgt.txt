
// ------------------------- merge sort ------------------------- 

#include <stdio.h>
void printArray(int *A, int n){
    for (int i = 0; i < n; i++)
        printf("%d ", A[i]);
    printf("\n");
}

void merge(int A[], int mid, int low, int high){
    int i, j, k, B[100];
    i = low;
    j = mid + 1;
    k = low;

    while (i <= mid && j <= high)
    {
        if (A[i] < A[j])
        {
            B[k] = A[i];
            i++;
            k++;
        }
        else
        {
            B[k] = A[j];
            j++;
            k++;
        }
    }
    while (i <= mid)
    {
        B[k] = A[i];
        k++;
        i++;
    }
    while (j <= high)
    {
        B[k] = A[j];
        k++;
        j++;
    }
    for (int i = low; i <= high; i++)
    {
        A[i] = B[i];
    }
    
}

void mergeSort(int A[], int low, int high){
    int mid; 
    if(low<high){
        mid = (low + high) /2;
        mergeSort(A, low, mid);
        mergeSort(A, mid+1, high);
        merge(A, mid, low, high);
    }
}

int main()
{
    // int A[] = {9, 14, 4, 8, 7, 5, 6};
    int A[] = {9, 1, 4, 14, 4, 15, 6};
    int n = 7;
    printArray(A, n);
    mergeSort(A, 0, 6);
    printArray(A, n);
    return 0;
}

// ------------------------- quick sort ------------------------- 

#include <stdio.h>

void swap(int *p1, int *p2){
    int t;
    t = *p1;
    *p1 = *p2;
    *p2 = t;
}

void printarray(int a[], int n)
{
    printf("ele of array are\n");
    int i;
    for (i = 0; i < n; i++)
        printf("%d ", a[i]);

    printf("\n");
}

int part(int a[], int low, int high)
{
    int i, j, pivot = a[low];
    i = low + 1;
    j = high;
    do
    {
        while (a[i] <= pivot)
        {
            i++;
        }
        while (a[j] > pivot)
        {
            j--;
        }
        if (i < j)
            swap(&a[j], &a[i]);
    } while (i < j);
    swap(&a[low],&a[j]);
    return j;
}
void quicksort(int a[], int low, int high)
{
    int pivotindex; // index of pivot after partation
    if (low < high)
    {
        pivotindex = part(a,low,high);
        //sort left subarray
        quicksort(a, low, pivotindex - 1);    
        //sort right subarray
        quicksort(a, pivotindex + 1, high);   
    }
}
int main()
{
    int A[] = {3, 5, 2, 13, 12};
    int n = 5;
    printarray(A, n);
    quicksort(A,0,n-1);
    printarray(A,n);

    return 0;
}


// --------------------------- Insertion sort in C++ ---------------------------

#include <iostream>
using namespace std;

void printArray(int array[], int size) {
  for (int i = 0; i < size; i++) {
    cout << array[i] << " ";
  }
  cout << endl;
}

void insertionSort(int array[], int size) {
  for (int step = 1; step < size; step++) {
    int key = array[step];
    int j = step - 1;
    while (key < array[j] && j >= 0) {
      array[j + 1] = array[j];
      --j;
    }
    array[j + 1] = key;
  }
}

int main() {
  int data[] = {9, 5, 1, 4, 3};
  int size = sizeof(data) / sizeof(data[0]);
  insertionSort(data, size);
  cout << "Sorted array in ascending order:\n";
  printArray(data, size);
}

// --------------------------- Selection sort in C++ --------------------------- 

#include <iostream>
using namespace std;

void swap(int *a, int *b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

void printArray(int array[], int size) {
  for (int i = 0; i < size; i++) {
    cout << array[i] << " ";
  }
  cout << endl;
}

void selectionSort(int array[], int size) {
  for (int step = 0; step < size - 1; step++) {
    int min_idx = step;
    for (int i = step + 1; i < size; i++) {
      if (array[i] < array[min_idx])
        min_idx = i;
    }

    swap(&array[min_idx], &array[step]);
  }
}

int main() {
  int data[] = {20, 12, 10, 15, 2};
  int size = sizeof(data) / sizeof(data[0]);
  selectionSort(data, size);
  cout << "Sorted array in Acsending Order:\n";
  printArray(data, size);
}


// ------------------------------ Bubble Sort ------------------------------

#include<iostream>
using namespace std;

// print array
void printArray(int a[],int n){
  for (int i = 0; i < n; i++){
    cout<<a[i]<<" ";
  }
  cout<<endl;
}

// swap element
void swap(int *a,int *b){
  int temp = *a;
  *a = *b;  *b = temp;
}

void bubbleSort(int arr[],int n){
  for (int i = 0; i < n-1; i++){
    for (int j = 0; j < n-1-i; j++){
      if(arr[j]>arr[j+1])
        swap(&arr[j],&arr[j+1]);
    }
  }
}

int main(){
  int a[5] = {3,-9,7,10,2};
  int n = 5;
  cout<<"Array element Before Sort\n";
  printArray(a,n);

  bubbleSort(a,n);
  cout<<"Array element After Sort\n";
  printArray(a,n);
  return 0;
}



---------------------- binary search ----------------------
#include <iostream>
using namespace std;

int binarySearch(int arr[], int left, int right, int target) {
    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            return mid;
        }

        if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return -1; // Return -1 if the target is not found
}

int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    int arr[size];
    cout << "Enter " << size << " elements in sorted order:\n";
    for (int i = 0; i < size; ++i) {
        cout << "Enter element " << i + 1 << ": ";
        cin >> arr[i];
    }

    int target;
    cout << "Enter the element to search for: ";
    cin >> target;

    int result = binarySearch(arr, 0, size - 1, target);

    if (result != -1) {
        cout << "Element found at index " << result << endl;
    } else {
        cout << "Element not found in the array." << endl;
    }

    return 0;
}


/////////Prim's Algo ------------------------------------------

#include <iostream>
#include <climits>
using namespace std;

int minKey(int key[], bool mstSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (mstSet[v] == false && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }

    return min_index;
}

void printMST(int parent[], int graph[V][V]) {
    cout << "Constructed Minimum Spanning Tree:\n";
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; i++) {
        cout << parent[i] << " - " << i << "\t" << graph[i][parent[i]] << endl;
    }
}

void primMST(int graph[V][V]) {
    int parent[V];
    int key[V];
    bool mstSet[V];

    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);

        mstSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printMST(parent, graph);
}

int main() {
     int V;
    cout<<"Enter no. of vertices and edges";
    cin>>V;
    int graph[V][V];

    cout << "Enter " << V << "x" << V << " adjacency matrix for the graph:\n";
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> graph[i][j];
        }
    }

    primMST(graph);

    return 0;
}



////////////////Krushkal Algo ------------------------------------------------


#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class DSU {
    int *parent;
    int *rank;

public:
    DSU(int n) {
        parent = new int[n];
        rank = new int[n];

        for (int i = 0; i < n; i++) {
            parent[i] = -1;
            rank[i] = 1;
        }
    }

    int find(int i) {
        if (parent[i] == -1)
            return i;

        return parent[i] = find(parent[i]);
    }

    void unite(int x, int y) {
        int s1 = find(x);
        int s2 = find(y);

        if (s1 != s2) {
            if (rank[s1] < rank[s2]) {
                parent[s1] = s2;
            } else if (rank[s1] > rank[s2]) {
                parent[s2] = s1;
            } else {
                parent[s2] = s1;
                rank[s1] += 1;
            }
        }
    }
};

class Graph {
    vector<vector<int>> edgelist;
    int V;

public:
    Graph(int V) { this->V = V; }

    void addEdge(int x, int y, int w) {
        edgelist.push_back({w, x, y});
    }

    void kruskals_mst() {
        sort(edgelist.begin(), edgelist.end());

        DSU s(V);
        int ans = 0;
        cout << "Following are the edges in the constructed MST" << endl;
        for (auto edge : edgelist) {
            int w = edge[0];
            int x = edge[1];
            int y = edge[2];

            if (s.find(x) != s.find(y)) {
                s.unite(x, y);
                ans += w;
                cout << x << " -- " << y << " == " << w << endl;
            }
        }
        cout << "Minimum Cost Spanning Tree: " << ans;
    }
};

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;

    Graph g(V);

    cout << "Enter edges in the format (source destination weight):" << endl;
    for (int i = 0; i < E; ++i) {
        int x, y, w;
        cin >> x >> y >> w;
        g.addEdge(x, y, w);
    }

    g.kruskals_mst();

    return 0;
}



----------------------------------- Topological Sort -----------------------------------

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void topologicalSortUtil(int v, vector<int> adj[], vector<bool>& visited, queue<int>& q) {
    visited[v] = true;

    for (int i : adj[v]) {
        if (!visited[i]) {
            topologicalSortUtil(i, adj, visited, q);
        }
    }

    q.push(v);
}

void topologicalSort(int V, vector<int> adj[]) {
    vector<bool> visited(V, false);
    queue<int> q;

    for (int i = 0; i < V; ++i) {
        if (!visited[i]) {
            topologicalSortUtil(i, adj, visited, q);
        }
    }

    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    vector<int> adj[V];
    cout << "Enter the edges (from -> to):" << endl;
    for (int i = 0; i < E; ++i) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
    }

    cout << "Topological Sort: ";
    topologicalSort(V, adj);

    return 0;
}


Example input-
Number of vertices: 6
Number of edges: 6
Edges:
5 2
5 0
4 0
4 1
2 3
3 1


Output:
Topological Sort: 5 4 2 3 1 0


----------------------------------- 0-1 KNAPSACK PROBLEM-----------------------------------
#include <iostream>
#include <vector>
using namespace std;

int knapsack(int W, vector<int>& wt, vector<int>& val, int n) {
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    for (int i = 0; i <= n; ++i) {
        for (int w = 0; w <= W; ++w) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (wt[i - 1] <= w) {
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][W];
}

int main() {
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;

    vector<int> val(n);
    vector<int> wt(n);

    cout << "Enter values of items: ";
    for (int i = 0; i < n; ++i) {
        cin >> val[i];
    }

    cout << "Enter weights of items: ";
    for (int i = 0; i < n; ++i) {
        cin >> wt[i];
    }

    cout << "Enter knapsack capacity: ";
    cin >> W;

    int maxVal = knapsack(W, wt, val, n);
    cout << "Maximum value in knapsack: " << maxVal << endl;

    return 0;
}


Example Input:

Number of items: 3
Values: 60 100 120
Weights: 10 20 30
Knapsack capacity: 50

Output:
Maximum value in knapsack: 220



----------------------------------- WARSHALLS ALGO -----------------------------------

#include <iostream>
#include <vector>
using namespace std;

void transitiveClosure(vector<vector<int>>& graph, int V) {
    vector<vector<int>> reach(V, vector<int>(V));

    // Initialize reach matrix with the given graph
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            reach[i][j] = graph[i][j];
        }
    }

    // Warshall's algorithm
    for (int k = 0; k < V; ++k) {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                reach[i][j] = reach[i][j] || (reach[i][k] && reach[k][j]);
            }
        }
    }

    // Print transitive closure matrix
    cout << "Transitive Closure Matrix:" << endl;
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cout << reach[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int V;
    cout << "Enter the number of vertices: ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V));
    cout << "Enter the adjacency matrix (0/1):" << endl;
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> graph[i][j];
        }
    }

    transitiveClosure(graph, V);

    return 0;
}

Example Input:
Number of vertices: 4
Adjacency Matrix:
0 1 0 0
0 0 1 0
0 0 0 1
1 0 0 0

Output (Transitive Closure Matrix):
Transitive Closure Matrix:
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1

----------------------------------- N-QUEENS ALGO -----------------------------------

#include <iostream>
#include <vector>
using namespace std;

bool isSafe(vector<vector<int>>& board, int row, int col, int N) {
    int i, j;

    // Check left side of current row
    for (i = 0; i < col; ++i) {
        if (board[row][i]) {
            return false;
        }
    }

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j]) {
            return false;
        }
    }

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < N; ++i, --j) {
        if (board[i][j]) {
            return false;
        }
    }

    return true;
}

bool solveNQueensUtil(vector<vector<int>>& board, int col, int N) {
    if (col >= N) {
        return true; // All queens are placed
    }

    for (int i = 0; i < N; ++i) {
        if (isSafe(board, i, col, N)) {
            board[i][col] = 1; // Place the queen

            // Recur to place rest of the queens
            if (solveNQueensUtil(board, col + 1, N)) {
                return true;
            }

            // If placing queen in board[i][col] doesn't lead to a solution
            board[i][col] = 0; // Backtrack
        }
    }

    return false; // If queen cannot be placed in any row of this column
}

void solveNQueens(int N) {
    vector<vector<int>> board(N, vector<int>(N, 0));

    if (!solveNQueensUtil(board, 0, N)) {
        cout << "Solution does not exist.";
        return;
    }

    // Print the solution
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int N;
    cout << "Enter the number of queens: ";
    cin >> N;

    solveNQueens(N);

    return 0;
}


Example Input:
Enter the number of queens: 4

Output:
0 0 1 0
1 0 0 0
0 0 0 1
0 1 0 0





----------------------------------------------------------------------For Theory Question ----------------------------------------------------------------------

Absolutely! Let's break down each of these problems theoretically and provide a suitable example for better understanding.

### N-Queens Problem:

**Theoretical Explanation:**
The N-Queens problem involves placing N chess queens on an \(N \times N\) chessboard so that no two queens threaten each other. Queens attack each other if they share the same row, column, or diagonal. The task is to find all possible configurations where N queens can be placed safely on the board.

**Example:**
Consider a \(4 \times 4\) chessboard:

```
0 0 1 0
1 0 0 0
0 0 0 1
0 1 0 0
```

In this configuration, each '1' represents the position of a queen, and '0' represents an empty cell. There are four queens placed in non-attacking positions.

### 0-1 Knapsack Problem:

**Theoretical Explanation:**
The 0-1 Knapsack problem involves a knapsack with a fixed capacity and a set of items, each with a specific weight and value. The goal is to determine the maximum value that can be obtained by selecting items to fit into the knapsack without exceeding its capacity. The constraint is that an item can either be selected or rejected (0 or 1, hence the name 0-1 Knapsack).

**Example:**
Consider a knapsack with a capacity of 50 and the following items:

- Item 1: Value = 60, Weight = 10
- Item 2: Value = 100, Weight = 20
- Item 3: Value = 120, Weight = 30

The maximum value that can be obtained without exceeding the capacity is 220 by selecting items 1 and 3.

### Topological Sort:

**Theoretical Explanation:**
Topological Sort is used to order the vertices of a directed graph in such a way that for every directed edge from vertex u to vertex v, u comes before v in the ordering. It's applicable to Directed Acyclic Graphs (DAGs) and aids in scheduling tasks, among other applications.

**Example:**
Consider the following dependencies:
- Task 1 must be completed before Task 2 and Task 3.
- Task 3 must be completed before Task 4.
- Task 2 must be completed before Task 4.

A possible topological sort order could be: 1, 2, 3, 4.

### Transitive Closure using Warshall's Algorithm:

**Theoretical Explanation:**
The transitive closure of a directed graph determines all pairs of vertices reachable from each other in the graph. Warshall's algorithm computes the transitive closure matrix using dynamic programming. It's based on the concept of matrix multiplication and transitive property in graphs.

**Example:**
Consider a directed graph with vertices {A, B, C} and edges:
- A -> B
- B -> C
- C -> A

The transitive closure matrix would indicate reachability between pairs of vertices. For this example, the transitive closure matrix would show that all vertices are reachable from each other: 
```
1 1 1
1 1 1
1 1 1
```

Each '1' represents reachability between vertices, and '0' indicates no direct path.

These explanations and examples should give you a clearer understanding of these fundamental algorithmic problems!




/////ASYMPTOTIC NOTATION////
Certainly! Asymptotic notation is a way to describe how the runtime or space requirements of an algorithm change as the size of the input gets very large. It gives a simplified, high-level view of how efficient an algorithm is.

There are three common notations:

1. **Big O (O)**: Describes the worst-case scenario, or the longest time an algorithm could take for any input size.(upper bound)

2. **Omega (Ω)**: Describes the best-case scenario, or the shortest time an algorithm could take for any input size.(lower bound)

3. **Theta (θ)**: Describes the average-case scenario, providing both upper and lower bounds, and is a more precise estimate.

These notations help us compare and choose algorithms based on their expected performance for large input sizes. Remember, they don't account for constant factors which can be important in practical applications.




///////krushkals algo theory/////
Kruskal's algorithm is a greedy algorithm used to find the minimum spanning tree of a weighted, connected graph. A minimum spanning tree is a subset of the edges of the graph that forms a tree and includes all the vertices, with the minimum possible total edge weight.

Here's how Kruskal's algorithm works:

1. **Sort Edges by Weight**:
   - Start by sorting all the edges of the graph in non-decreasing order of their weights.

2. **Initialize a Disjoint Set (Union-Find)**:
   - Each vertex initially forms its own set.

3. **Iterate Over Sorted Edges**:
   - Starting from the smallest edge, if adding it to the tree does not create a cycle, add it to the minimum spanning tree.

4. **Final Minimum Spanning Tree**:
   - The final minimum spanning tree is the set of selected edges.

Certainly! Let's consider a simple weighted, undirected graph with 4 vertices and 5 edges:

```
     1
  A ----- B
  |\     |
  | \ 4  |
3 |  \   |2
  |   \  |
  |    \ |
  C ----- D
     5
```

Edge List :
```
(A, B, 1), (A, C, 3), (A, D, 4), (B, D, 2), (C, D, 5)

(sorted by weight)
(A, B, 1),(B, D, 2),(A, C, 3),(A, D, 4),(C, D, 5)
```

Vertices and Sets:
```
Vertices: A B C D
Set:      A B C D
```

1. Add (A, B, 1):
   ```
   Vertices: A B C D
   Set:      A B B D
   Tree: (A, B, 1)
   ```

2. Add (B, D, 2):
   ```
   Vertices: A B C D
   Set:      A B B B
   Tree: (A, B, 1), (B, D, 2)
   ```

3. Add (A, C, 3):
   ```
   Vertices: A B C D
   Set:      A B B B
   Tree: (A, B, 1), (B, D, 2), (A, C, 3)
   ```

Final Minimum Spanning Tree:
```
(A, B, 1), (B, D, 2), (A, C, 3)
```

This is the minimum spanning tree found by Kruskal's algorithm for the given graph.



/////PRIMS ALGO THEORY////////


Prim's algorithm is another greedy algorithm used to find the minimum spanning tree of a weighted, connected graph. It starts from an arbitrary vertex and grows the tree by adding the smallest edge that connects a vertex in the tree to a vertex outside the tree.

Here's how Prim's algorithm works:

1. **Start with an Empty Set**:
   - Start with just one vertex (any vertex can be chosen).

2. **Find Minimum Edge**:
   - Find the minimum-weight edge connected to the set and add the vertex at the other end of the edge to the set.

3. **Continue Adding Edges**:
   - Repeatedly find the minimum-weight edge that connects a vertex in the set to a vertex outside the set, and add it to the set.

4. **Final Minimum Spanning Tree**:
   - The final minimum spanning tree is the set of selected edges.

**Example**:

Let's consider the same weighted, undirected graph as before:

```
     1
  A ----- B
   |\     |
3  | \    |2
   |  \4  |
   |   \  |
   |    \ |
  C ----- D
     5
```

Starting with vertex A:

- Set: A

1. Add (A, B, 1):
   ```
   Set: A B
   ```

2. Add (B, D, 2):
   ```
   Set: A B D
   ```

3. Add (A, C, 3):
   ```
   Set: A B D C
   ```

Final Minimum Spanning Tree:
```
(A, B, 1), (B, D, 2), (A, C, 3)
```

This is the minimum spanning tree found by Prim's algorithm for the given graph. Note that the final result is the same as what we obtained using Kruskal's algorithm, which confirms that both algorithms yield the same minimum spanning tree for this graph.




